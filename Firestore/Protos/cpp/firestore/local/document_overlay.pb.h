/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/local/document_overlay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2fdocument_5foverlay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2fdocument_5foverlay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/firestore/v1/write.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_firestore_2flocal_2fdocument_5foverlay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_firestore_2flocal_2fdocument_5foverlay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_firestore_2flocal_2fdocument_5foverlay_2eproto;
namespace firestore {
namespace client {
class DocumentOverlay;
class DocumentOverlayDefaultTypeInternal;
extern DocumentOverlayDefaultTypeInternal _DocumentOverlay_default_instance_;
}  // namespace client
}  // namespace firestore
PROTOBUF_NAMESPACE_OPEN
template<> ::firestore::client::DocumentOverlay* Arena::CreateMaybeMessage<::firestore::client::DocumentOverlay>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace firestore {
namespace client {

// ===================================================================

class DocumentOverlay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firestore.client.DocumentOverlay) */ {
 public:
  DocumentOverlay();
  virtual ~DocumentOverlay();

  DocumentOverlay(const DocumentOverlay& from);
  DocumentOverlay(DocumentOverlay&& from) noexcept
    : DocumentOverlay() {
    *this = ::std::move(from);
  }

  inline DocumentOverlay& operator=(const DocumentOverlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentOverlay& operator=(DocumentOverlay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentOverlay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentOverlay* internal_default_instance() {
    return reinterpret_cast<const DocumentOverlay*>(
               &_DocumentOverlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DocumentOverlay& a, DocumentOverlay& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentOverlay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentOverlay* New() const final {
    return CreateMaybeMessage<DocumentOverlay>(nullptr);
  }

  DocumentOverlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentOverlay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentOverlay& from);
  void MergeFrom(const DocumentOverlay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentOverlay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firestore.client.DocumentOverlay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_firestore_2flocal_2fdocument_5foverlay_2eproto);
    return ::descriptor_table_firestore_2flocal_2fdocument_5foverlay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlayMutationFieldNumber = 2,
    kLargestBatchIdFieldNumber = 1,
  };
  // .google.firestore.v1.Write overlay_mutation = 2;
  bool has_overlay_mutation() const;
  private:
  bool _internal_has_overlay_mutation() const;
  public:
  void clear_overlay_mutation();
  const ::google::firestore::v1::Write& overlay_mutation() const;
  ::google::firestore::v1::Write* release_overlay_mutation();
  ::google::firestore::v1::Write* mutable_overlay_mutation();
  void set_allocated_overlay_mutation(::google::firestore::v1::Write* overlay_mutation);
  private:
  const ::google::firestore::v1::Write& _internal_overlay_mutation() const;
  ::google::firestore::v1::Write* _internal_mutable_overlay_mutation();
  public:

  // int32 largest_batch_id = 1;
  void clear_largest_batch_id();
  ::PROTOBUF_NAMESPACE_ID::int32 largest_batch_id() const;
  void set_largest_batch_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_largest_batch_id() const;
  void _internal_set_largest_batch_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:firestore.client.DocumentOverlay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::firestore::v1::Write* overlay_mutation_;
  ::PROTOBUF_NAMESPACE_ID::int32 largest_batch_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_firestore_2flocal_2fdocument_5foverlay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentOverlay

// int32 largest_batch_id = 1;
inline void DocumentOverlay::clear_largest_batch_id() {
  largest_batch_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DocumentOverlay::_internal_largest_batch_id() const {
  return largest_batch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DocumentOverlay::largest_batch_id() const {
  // @@protoc_insertion_point(field_get:firestore.client.DocumentOverlay.largest_batch_id)
  return _internal_largest_batch_id();
}
inline void DocumentOverlay::_internal_set_largest_batch_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  largest_batch_id_ = value;
}
inline void DocumentOverlay::set_largest_batch_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_largest_batch_id(value);
  // @@protoc_insertion_point(field_set:firestore.client.DocumentOverlay.largest_batch_id)
}

// .google.firestore.v1.Write overlay_mutation = 2;
inline bool DocumentOverlay::_internal_has_overlay_mutation() const {
  return this != internal_default_instance() && overlay_mutation_ != nullptr;
}
inline bool DocumentOverlay::has_overlay_mutation() const {
  return _internal_has_overlay_mutation();
}
inline const ::google::firestore::v1::Write& DocumentOverlay::_internal_overlay_mutation() const {
  const ::google::firestore::v1::Write* p = overlay_mutation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::firestore::v1::Write*>(
      &::google::firestore::v1::_Write_default_instance_);
}
inline const ::google::firestore::v1::Write& DocumentOverlay::overlay_mutation() const {
  // @@protoc_insertion_point(field_get:firestore.client.DocumentOverlay.overlay_mutation)
  return _internal_overlay_mutation();
}
inline ::google::firestore::v1::Write* DocumentOverlay::release_overlay_mutation() {
  // @@protoc_insertion_point(field_release:firestore.client.DocumentOverlay.overlay_mutation)
  
  ::google::firestore::v1::Write* temp = overlay_mutation_;
  overlay_mutation_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::Write* DocumentOverlay::_internal_mutable_overlay_mutation() {
  
  if (overlay_mutation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::Write>(GetArenaNoVirtual());
    overlay_mutation_ = p;
  }
  return overlay_mutation_;
}
inline ::google::firestore::v1::Write* DocumentOverlay::mutable_overlay_mutation() {
  // @@protoc_insertion_point(field_mutable:firestore.client.DocumentOverlay.overlay_mutation)
  return _internal_mutable_overlay_mutation();
}
inline void DocumentOverlay::set_allocated_overlay_mutation(::google::firestore::v1::Write* overlay_mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overlay_mutation_);
  }
  if (overlay_mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overlay_mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_mutation, submessage_arena);
    }
    
  } else {
    
  }
  overlay_mutation_ = overlay_mutation;
  // @@protoc_insertion_point(field_set_allocated:firestore.client.DocumentOverlay.overlay_mutation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace firestore

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2fdocument_5foverlay_2eproto
